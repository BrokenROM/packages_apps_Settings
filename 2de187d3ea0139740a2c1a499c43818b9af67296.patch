From 2de187d3ea0139740a2c1a499c43818b9af67296 Mon Sep 17 00:00:00 2001
From: Darescu Ionut <ionut.darescu@gmail.com>
Date: Fri, 14 Nov 2014 04:21:21 -0500
Subject: [PATCH] AdBlocker 1/3

squash of:

https://github.com/LiquidSmooth/android_packages_apps_Settings/commit/13e68b890c1dfa17a0f91e093e75e0968ace9e3f
https://github.com/LiquidSmooth/android_packages_apps_Settings/commit/64d994970cec2690ae7664d1e8d6388a6b203a8f
https://github.com/LiquidSmooth/android_packages_apps_Settings/commit/01942eff1c384f3f4a1f276d0280ea3d9d83ff8d

credit to the original authors

Change-Id: I4b5a2aca90665ef018e35a9abface1f01fbb75a2

Conflicts:
	res/values/liquid_strings.xml
	res/xml/hfm_settings.xml

Conflicts:
	res/xml/broken_main_settings.xml
	res/xml/hfm_settings.xml
---
 AndroidManifest.xml                                |   8 +
 res/values/broken_strings.xml                      |  11 ++
 res/xml/dashboard_categories.xml                   |   7 +
 res/xml/hfm_settings.xml                           |  30 +++
 .../android/settings/broken/hfm/CheckHosts.java    |  49 +++++
 .../android/settings/broken/hfm/FetchHosts.java    |  62 ++++++
 .../android/settings/broken/hfm/HfmHelpers.java    | 213 +++++++++++++++++++++
 .../android/settings/broken/hfm/HfmSettings.java   | 105 ++++++++++
 .../settings/broken/hfm/IntentReceiver.java        |  39 ++++
 9 files changed, 524 insertions(+)
 create mode 100644 res/xml/hfm_settings.xml
 create mode 100644 src/com/android/settings/broken/hfm/CheckHosts.java
 create mode 100644 src/com/android/settings/broken/hfm/FetchHosts.java
 create mode 100644 src/com/android/settings/broken/hfm/HfmHelpers.java
 create mode 100644 src/com/android/settings/broken/hfm/HfmSettings.java
 create mode 100644 src/com/android/settings/broken/hfm/IntentReceiver.java

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 04aaa3b..05113dd 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -2062,6 +2062,14 @@
             </intent-filter>
         </receiver>
 
+        <receiver android:name="com.android.settings.broken.hfm.IntentReceiver" >
+            <intent-filter>
+                 <action android:name="android.intent.action.BOOT_COMPLETED" />
+            </intent-filter>
+        </receiver>
+
+        <service android:name="com.android.settings.broken.hfm.CheckHosts" />
+
         <provider
             android:name="android.support.v4.content.FileProvider"
             android:authorities="com.android.settings.files"
diff --git a/res/values/broken_strings.xml b/res/values/broken_strings.xml
index ff3e92a..aaa13c5 100644
--- a/res/values/broken_strings.xml
+++ b/res/values/broken_strings.xml
@@ -486,4 +486,15 @@
     <string name="category_general_title">Tweaks</string>
     <string name="broken_settings_title">BrokenOs</string>
 
+    <!-- Host File Manager -->
+    <string name="hfm_disable_ads_title">Disable Ads</string>
+    <string name="hfm_disable_ads_summary">Change hosts file to disable ads</string>
+    <string name="hfm_pref_screen_title">Ad blocker</string>
+    <string name="hfm_update_hosts">Update hosts file</string>
+    <string name="hfm_update_hosts_summary">Download and apply fresh hosts</string>
+    <string name="hfm_dialog_wait">Working, please wait...</string>
+    <string name="hfm_dialog_failed">Updating hosts file failed. Please try again.</string>
+    <string name="hfm_dialog_success">/4 hosts sources successfully applied!</string>
+    <string name="hfm_dialog_conn_error">Error: No network connectivity</string>
+
 </resources>
diff --git a/res/xml/dashboard_categories.xml b/res/xml/dashboard_categories.xml
index cb2b8a5..76fca30 100644
--- a/res/xml/dashboard_categories.xml
+++ b/res/xml/dashboard_categories.xml
@@ -289,6 +289,13 @@
 				android:summary="@string/header_summary_init_d"
 				/>
 
+        <!-- Adblocker -->
+		<dashboard-tile
+				android:key="hfm_settings"
+				android:title="@string/hfm_pref_screen_title"
+				android:fragment="com.android.settings.broken.hfm.HfmSettings"
+				/>
+
     </dashboard-category>
 
 </dashboard-categories>
diff --git a/res/xml/hfm_settings.xml b/res/xml/hfm_settings.xml
new file mode 100644
index 0000000..f4e0ba2
--- /dev/null
+++ b/res/xml/hfm_settings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2014 Android Ice Cold Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings"
+    android:title="@string/hfm_disable_ads_title" >
+
+        <CheckBoxPreference
+            android:key="hfm_disable_ads"
+            android:title="@string/hfm_disable_ads_title"
+            android:summary="@string/hfm_disable_ads_summary"
+            android:persistent="false" />
+
+        <Preference
+            android:key="hfm_update_hosts"
+            android:title="@string/hfm_update_hosts"
+            android:summary="@string/hfm_update_hosts_summary"
+            android:dependency="hfm_disable_ads" />
+
+</PreferenceScreen>
diff --git a/src/com/android/settings/broken/hfm/CheckHosts.java b/src/com/android/settings/broken/hfm/CheckHosts.java
new file mode 100644
index 0000000..ec48613
--- /dev/null
+++ b/src/com/android/settings/broken/hfm/CheckHosts.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2014 Dirty Unicorns
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.broken.hfm;
+
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.IBinder;
+import android.util.Log;
+
+public class CheckHosts extends Service {
+
+    private static final String TAG = "HFMCheckHosts";
+
+    public static final String HFM_DISABLE_ADS = "hfm_disable_ads";
+
+    private Context mContext;
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    @Override
+    public void onCreate() {
+        mContext = this;
+    }
+
+    @Override
+    public void onStart(Intent intent, int startId) {
+        Log.i(TAG, "Started check");
+        HfmHelpers.checkStatus(mContext);
+    }
+}
diff --git a/src/com/android/settings/broken/hfm/FetchHosts.java b/src/com/android/settings/broken/hfm/FetchHosts.java
new file mode 100644
index 0000000..b63c766
--- /dev/null
+++ b/src/com/android/settings/broken/hfm/FetchHosts.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2014 Android Ice Cold Project
+ * Copyright (C) 2014 Dirty Unicorns
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.broken.hfm;
+
+import java.io.IOException;
+
+import com.android.settings.broken.hfm.HfmHelpers;
+
+public class FetchHosts {
+
+    public static String[] stringUrl = {
+        "http://hosts-file.net/.%5Cad_servers.txt",
+        "http://winhelp2002.mvps.org/hosts.txt",
+        "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext",
+        "http://adaway.org/hosts.txt"
+    };
+
+    public static int successfulSources;
+
+    public static void fetch() throws IOException {
+
+        String cmd = "mount -o rw,remount /system && echo \'foo\' > /etc/started.cfg && sed -i -e '$G' /etc/hosts.alt";
+
+        successfulSources = 0;
+
+        int i = 0;
+        while (i <= 3) {
+            if (HfmHelpers.isAvailable(stringUrl[i])) {
+                cmd = cmd + " && wget \"" + stringUrl[i] + "\" -O /etc/hosts" + i; //Get file
+                cmd = cmd + " && sed -i -e '$G' /etc/hosts" + i; //Put newline
+                successfulSources++;
+            }
+            i++;
+        }
+
+        cmd = cmd + " && cat /etc/hosts[0-9] /etc/hosts.alt > /etc/hosts.tmp" //Merge old & new hosts
+                  + " && sort -u /etc/hosts.tmp -o /etc/hosts.tmp" //Remove duplicate lines
+                  + " && sed -i '/^[@#]/ d' /etc/hosts.tmp" //Remove commented lines
+                  + " && sed -i '/^$/d' /etc/hosts.tmp" //Remove blank lines
+                  + " && sed -i '1i#BrokenOs\' /etc/hosts.tmp" // Add BrokenOs tag
+                  + " && cp -f /etc/hosts.tmp /etc/hosts.alt"
+                  + " && rm -f /etc/hosts[0-9] /etc/hosts.tmp /etc/started.cfg" //Clean up
+                  + " && mount -o ro,remount /system";
+
+       HfmHelpers.RunAsRoot(cmd);
+    }
+}
diff --git a/src/com/android/settings/broken/hfm/HfmHelpers.java b/src/com/android/settings/broken/hfm/HfmHelpers.java
new file mode 100644
index 0000000..f9bd4a5
--- /dev/null
+++ b/src/com/android/settings/broken/hfm/HfmHelpers.java
@@ -0,0 +1,213 @@
+/*
+ * Copyright (C) 2014 Dirty Unicorns
+ * Copyright (C) 2014 Android Ice Cold Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.broken.hfm;
+
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.BufferedReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.StrictMode;
+import android.provider.Settings;
+import android.widget.TextView;
+
+import com.android.settings.broken.hfm.HfmSettings;
+import com.android.settings.R;
+
+public final class HfmHelpers {
+    private static final String TAG = "HfmHelpers";
+
+    private HfmHelpers() {
+        throw new AssertionError();
+    }
+
+    public static int i = 0;
+
+    public static void checkStatus(Context context) {
+        File defHosts = new File("/etc/hosts.og");
+        File altHosts = new File("/etc/hosts.alt");
+        File hosts = new File("/etc/hosts");
+        try {
+            if (Settings.System.getInt(context.getContentResolver(), Settings.System.HFM_DISABLE_ADS, 0) == 1
+                    && areFilesDifferent(hosts, altHosts)) {
+                copyFiles(altHosts, hosts);
+            } else if (Settings.System.getInt(context.getContentResolver(), Settings.System.HFM_DISABLE_ADS, 0) == 0
+                    && areFilesDifferent(hosts, defHosts) && isOurHostsFile()) {
+                copyFiles(defHosts, hosts);
+            }
+        }
+        catch(IOException e)
+        {
+            e.printStackTrace();
+        }
+    }
+
+    public static boolean areFilesDifferent(File file1, File file2) throws IOException {
+        String cr1, cr2;
+        BufferedReader br1 = getBufferedReader(file1);
+        BufferedReader br2 = getBufferedReader(file2);
+        while ((cr1 = br1.readLine()) != null) {
+                if((cr2 = br2.readLine()) != null) {
+                        if(cr1.equals(cr2)) {
+                            continue;
+                        }
+                }
+                return true;
+        }
+        return br2.readLine() != null;
+    }
+
+    private static boolean isOurHostsFile() throws IOException {
+        boolean ret = false;
+        File hosts = new File("/etc/hosts");
+        String line;
+        BufferedReader rd1 = getBufferedReader(hosts);
+        line = rd1.readLine();
+        if (line.contains("#BrokenOs")) {
+            ret = true;
+        }
+        return ret;
+    }
+
+    private static BufferedReader getBufferedReader(File file) throws IOException {
+            return new BufferedReader(new FileReader(file));
+    }
+
+    public static void RunAsRoot(String string) throws IOException {
+        Process P = Runtime.getRuntime().exec("su");
+        DataOutputStream os = new DataOutputStream(P.getOutputStream());
+        os.writeBytes(string + "\n");
+        os.writeBytes("exit\n");
+        os.flush();
+    }
+
+    public static void copyFiles(File srcFile, File dstFile) throws IOException {
+        if (srcFile.exists() && dstFile.exists()) {
+            String cmd = "mount -o rw,remount /system"
+                       + " && rm -f " + dstFile.getAbsolutePath()
+                       + " && cp -f " + srcFile.getAbsolutePath() + " " + dstFile.getAbsolutePath()
+                       + " && chmod 644 " + dstFile.getAbsolutePath()
+                       + " ; mount -o ro,remount /system";
+            RunAsRoot(cmd);
+        }
+    }
+
+    public static boolean isScriptFinished() {
+        File altHosts = new File("/etc/hosts.alt");
+        File hosts0 = new File("/etc/hosts0");
+        File hosts1 = new File("/etc/hosts1");
+        File hosts2 = new File("/etc/hosts2");
+        File hosts3 = new File("/etc/hosts3");
+        File tmpHosts = new File("/etc/hosts.tmp");
+        File started = new File("/etc/started.cfg");
+
+        if (altHosts.exists() && !hosts0.exists() && !hosts1.exists()
+            && !hosts2.exists() && !hosts3.exists() && !tmpHosts.exists() && !started.exists()) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public static boolean isAvailable(String urlString) throws IOException {
+        try {
+            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
+            StrictMode.setThreadPolicy(policy);
+
+            URL url = new URL(urlString);
+
+            HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
+            urlc.setRequestProperty("Connection", "close");
+            urlc.setConnectTimeout(1000);
+            urlc.connect();
+
+            if (urlc.getResponseCode() == 200) {
+                return true;
+            } else {
+                return false;
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return false;
+    }
+
+    public static void showDialog(String message, Context c) {
+        AlertDialog dialog = new AlertDialog.Builder(c)
+        .setMessage(message)
+        .setNeutralButton("OK", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                //Nothing here
+            }
+        }).show();
+        TextView tv = (TextView) dialog.findViewById(android.R.id.message);
+        tv.setTextSize(14);
+    }
+
+    public static void checkConnectivity(Context c, ConnectivityManager man) throws IOException {
+        NetworkInfo networkInfo = man.getActiveNetworkInfo();
+        if (networkInfo != null && networkInfo.isConnected()) {
+            HfmSettings.pd.show();
+            FetchHosts.fetch(); //Download and manage new hosts
+            i = 0;
+            applyNew(c);
+        } else {
+            showDialog(HfmSettings.res.getString(R.string.hfm_dialog_conn_error, c), c);
+        }
+    }
+
+    public static void applyNew(final Context c) {
+
+        final int delay = 500; //ms
+        final Handler h = new Handler();
+        h.postDelayed(new Runnable() {
+            public void run() {
+                if (isScriptFinished()) {
+                    if (HfmSettings.mHfmDisableAds.isChecked()) {
+                        checkStatus(c); //Hosts are downloaded. Apply if user has enabled blocking.
+                    }
+                    showDialog(FetchHosts.successfulSources + HfmSettings.res.getString(R.string.hfm_dialog_success), c);
+                    HfmSettings.pd.dismiss();
+                } else if (i < 40) {
+                    i++;
+                    h.postDelayed(this, delay);
+                } else {
+                    showDialog(HfmSettings.res.getString(R.string.hfm_dialog_failed), c);
+                    try {
+                        RunAsRoot("mount -o rw,remount /system"
+                                     + " && rm -f /etc/hosts[0-9] /etc/hosts.tmp /etc/started.cfg"
+                                     + " && mount -o ro,remount /system"); //Clean scraps after failing
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                    HfmSettings.pd.dismiss();
+                }
+            }
+        }, delay);
+    }
+}
diff --git a/src/com/android/settings/broken/hfm/HfmSettings.java b/src/com/android/settings/broken/hfm/HfmSettings.java
new file mode 100644
index 0000000..d512740
--- /dev/null
+++ b/src/com/android/settings/broken/hfm/HfmSettings.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2014 Android Ice Cold Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.broken.hfm;
+
+import java.io.IOException;
+import android.app.ProgressDialog;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.res.Resources;
+import android.net.ConnectivityManager;
+import android.os.Bundle;
+import android.preference.CheckBoxPreference;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceClickListener;
+import android.preference.PreferenceScreen;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import android.view.View;
+
+import com.android.settings.broken.hfm.FetchHosts;
+import com.android.settings.broken.hfm.HfmHelpers;
+import com.android.settings.R;
+import com.android.settings.SettingsPreferenceFragment;
+
+public class HfmSettings extends SettingsPreferenceFragment {
+
+    private static final String TAG = "HfmSettings";
+    private static final String HFM_DISABLE_ADS = "hfm_disable_ads";
+
+    public static ProgressDialog pd;
+
+    ConnectivityManager connMgr;
+
+    public static CheckBoxPreference mHfmDisableAds;
+    Preference mHfmUpdateHosts;
+
+    Context context;
+
+    public static Resources res;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        context = getActivity();
+        res = getResources();
+        pd = new ProgressDialog(context);
+        pd.setCancelable(false);
+        pd.setMessage(res.getString(R.string.hfm_dialog_wait));
+        connMgr = (ConnectivityManager) getSystemService(context.CONNECTIVITY_SERVICE);
+
+        addPreferencesFromResource(R.xml.hfm_settings);
+        ContentResolver resolver = context.getContentResolver();
+        PreferenceScreen prefScreen = getPreferenceScreen();
+
+        mHfmDisableAds = (CheckBoxPreference) findPreference(HFM_DISABLE_ADS);
+        mHfmDisableAds.setChecked((Settings.System.getInt(resolver,
+            Settings.System.HFM_DISABLE_ADS, 0) == 1));
+        mHfmUpdateHosts = prefScreen.findPreference("hfm_update_hosts");
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+    }
+
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
+
+        if  (preference == mHfmDisableAds) {
+            boolean checked = ((CheckBoxPreference)preference).isChecked();
+            Settings.System.putInt(getActivity().getContentResolver(),
+                Settings.System.HFM_DISABLE_ADS, checked ? 1:0);
+            HfmHelpers.checkStatus(getActivity());
+        } else if (preference == mHfmUpdateHosts) {
+            try {
+                HfmHelpers.checkConnectivity(context, connMgr);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else {
+            return super.onPreferenceTreeClick(preferenceScreen, preference);
+        }
+        return true;
+    }
+}
diff --git a/src/com/android/settings/broken/hfm/IntentReceiver.java b/src/com/android/settings/broken/hfm/IntentReceiver.java
new file mode 100644
index 0000000..bfb263d
--- /dev/null
+++ b/src/com/android/settings/broken/hfm/IntentReceiver.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 Dirty Unicorns
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.broken.hfm;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+public class IntentReceiver extends BroadcastReceiver {
+
+    private static final String TAG = "HFMBootReceiver";
+
+    public static final String ACTION_RUN_BOOTCOMPLETE = "android.intent.action.BOOT_COMPLETED";
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        Log.i(TAG, "Started Receiver");
+        Intent serv = new Intent(context, CheckHosts.class);
+        serv.setAction(intent.getAction());
+        serv.putExtras(intent);
+        context.startService(serv);
+    }
+}
